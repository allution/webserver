define(["strategies/strategies","game-logic/script-controller","lib/events","lib/lodash","dispatcher/AppDispatcher","constants/AppConstants"],function(e,t,n,r,i,s){var o="change",u="widget_change",a=null,f=e.autoBet,l="autoBet",c=!1,h={};for(var p in e)e[p].isWidget&&(h[p]=e[p].initialState);var d=r.extend({},n,{emitChange:function(){this.trigger(o)},emitWidgetChange:function(){this.trigger(u)},addChangeListener:function(e){this.on(o,e)},removeChangeListener:function(e){this.off(o,e)},addWidgetChangeListener:function(e){this.on(u,e)},removeWidgetChangeListener:function(e){this.off(u,e)},_runStrategy:function(){console.assert(!a);var e;f.isWidget?e=f.logic(h[l]):e=new Function("engine",f),a=new t(e,this._stopScript.bind(this)),c=!0},_stopScript:function(){a.stopScript(),a=null,c=!1,this.emitChange(),this.emitWidgetChange()},_updateScript:function(e){console.assert(!f.isWidget),f=e},_selectStrategy:function(t){console.assert(e.hasOwnProperty(t)),l=t,f=e[t]},_dataInvalid:function(){return f.isWidget?h[l].invalidData:!1},getState:function(){return{active:c,strategy:f,selectedStrategy:l,invalidData:this._dataInvalid()}},_setWidgetState:function(e,t){console.assert(f.isWidget),h[l][e]=t,this._validateInput()},_validateInput:function(){f.isWidget?h[l].invalidData=f.validate(h[l]):h[l].invalidData=!1},getWidgetState:function(){return console.assert(f.isWidget),h[l]},getEditorState:function(){return c}});return i.register(function(e){var t=e.action;switch(t.actionType){case s.ActionTypes.RUN_STRATEGY:d._runStrategy(),d.emitChange(),d.emitWidgetChange();break;case s.ActionTypes.STOP_SCRIPT:d._stopScript(),d.emitChange(),d.emitWidgetChange();break;case s.ActionTypes.UPDATE_SCRIPT:d._updateScript(t.script),d.emitChange();break;case s.ActionTypes.SELECT_STRATEGY:d._selectStrategy(t.strategy),d.emitChange();break;case s.ActionTypes.SET_WIDGET_STATE:d._setWidgetState(t.property,t.state),d.emitChange(),d.emitWidgetChange()}return!0}),d});